class Cwd {
  use Fn;
  use Sys::IO;
  use Sys;

  private static method replace_chars : void ($string : mutable string, $from : byte, $to : byte) {
    
    unless ($string) {
      die "The string must be defined";
    }
    
    my $string_length = length $string;
    for (my $i = 0; $i < $string_length; $i++) {
      if ($string->[$i] == $from) {
        $string->[$i] = $to;
      }
    }
  }
  
  static method getcwd : string () {
    my $cwd = Sys::IO->getcwd(undef, 0);
    
    if (Sys->defined("_WIN32")) {
      &replace_chars($cwd, '\\', '/');
    }
    
    return $cwd;
  }
  
  static method realpath : string ($file : string) {
    if (Sys->defined("_WIN32")) {
      my $realpath = Sys::IO->_fullpath(undef, $file, 0);
      
      return $realpath;
    }
    else {
      my $realpath = Sys::IO->realpath($file, undef);
      
      return $realpath;
    }
  }
  
  static method abs_path : string ($file :string) { return &realpath($file); }
  
  static method getdcwd : string ($drive = undef : string) {
    unless (Sys->defined("_WIN32")) {
      set_error_code class_id Error::NotSupported;
      die "The getdcwd is not supported on this system";
    }
    my $drive_id = 0;
    if ($drive) {
      unless (length $drive == 2) {
        die "The length of the drive must be 2";
      }
      
      my $drive_upper = Fn->ucfirst($drive);
      my $drive_char = $drive_upper->[0];
      
      unless ($drive_char >= 'A' && $drive_char <= 'Z') {
        die "The character that the first character of the drive is coverted to the upper case must be between 'A' and 'Z'";
      }

      unless ($drive_upper->[1]) {
        die "The second character of the drive must be \":\"";
      }
      
      $drive_id = $drive_char - 'A' + 1;
    }
    
    my $cwd = Sys::IO->_getdcwd($drive_id, undef, 0);
    
    return $cwd;
  }
}
